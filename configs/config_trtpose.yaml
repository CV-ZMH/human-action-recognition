# Configurations for this project

# Classes of the actions.
# Warning: The name of training images folder should start with "${class}_".
#     In src/s2_put_skeleton_txts_to_a_single_txt.py,
#     The image whose label is not in `classes` will be filtered out.

#classes: ['stand', 'walk', 'run', 'jump', 'sit', 'squat', 'kick', 'punch', 'wave']
#classes: ['lying', 'other', 'sitting', 'standing']
classes: ['sit', 'stand', 'walk', 'falling']

image_filename_format: "{:05d}.png"
skeleton_filename_format: "{:05d}.txt"

features:
  window_size: 8 # Number of adjacent frames for extracting features.

s1_get_skeletons_from_training_imgs.py:
  openpose:
    model: cmu # cmu or mobilenet_thin. "cmu" is more accurate but slower.
    img_size: 256*256 #  656x368, or 432x368, 336x288. Bigger is more accurate.
  input:
    images_description_txt: /home/zeyan/Documents/Work/GW-pose/real-time-action-recognition-master/GW_train_GWPose.txt
    images_folder: /media/zeyan/SSD-PGMU3/Work/AR/data/data_p1/data_2/data_1/
  output:
    images_info_txt: data_proc/raw_skeletons_trtpose/images_info.txt
    detected_skeletons_folder: &skels_folder data_proc/raw_skeletons_trtpose/skeleton_res/
    viz_imgs_folders: data_proc/raw_skeletons_trtpose/image_viz/

s2_put_skeleton_txts_to_a_single_txt.py:
  input:
    # A folder of skeleton txts. Each txt corresponds to one image.
    detected_skeletons_folder: *skels_folder
  output:
    # One txt containing all valid skeletons.
    all_skeletons_txt: &skels_txt data_proc/raw_skeletons_trtpose/skeletons_info.txt

s3_preprocess_features.py:
  input:
    all_skeletons_txt: *skels_txt
  output:
    processed_features: &features_x data_proc/features_X_trtpose.csv
    processed_features_labels: &features_y data_proc/features_Y_trtpose.csv

s4_train.py:
  input:
    processed_features: *features_x
    processed_features_labels: *features_y
  output:
    model_path: model/trained_classifier_GWpose_RF.pickle

s5_test.py:
  # Input:
  #   For the input data_type, data_path, and model_path,
  #   please use the command line arguments.
  # Output:
  #   The result video and skeleton txts will be saved to
  #       ${args.output_folder}/${DST_FOLDER_NAME}/${video_name}
  #       ${args.output_folder}/${DST_FOLDER_NAME}/${skeleton_folder_name}/${skeleton_filename_format}
  #   where `DST_FOLDER_NAME` is defined in the function `get_dst_folder_name`.
  #   In short, the input video or folder will have the same output folder name;
  #             the input webcam will have a time stamp as the folder name.
  settings:

    source:
      webcam_max_framerate: 10.0
      video_sample_interval: 1

    openpose:
      model: mobilenet_thin
      img_size: 656x368
      # model: cmu
      # img_size: 432x368

    display:
      desired_rows: 480 # Resize the image and then display

  output:
    video_name: "video.avi" # save the resultant video to file
    video_fps: 10.0 # at what frame rate to write the output video
    skeleton_folder_name: "skeletons/"
